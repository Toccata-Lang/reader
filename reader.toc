
;; This file specifies the syntax of Toccata
;; It also contains the code to turn a Toccata program from a string
;; to an AST

;; Components to build the grammar out of
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "e8eba87"))

;; The different types of nodes in the AST
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "34d588c"))

(add-ns c (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                          "constraints.toc"
                          :sha "d1d3464"))

(defn min [x y]
  (either (< x y)
          y))

;; sometimes, we have to see what's wrong
(defn debug [tag]
  (grmr/ignore
   (apply-to (fn [file text]
               (print-err tag (count text)
                          (str "\"" (subs text 0 (min 40 (count text))) "\"")))
             (grmr/get-value 'file-name)
             grmr/get-text)))

(def symbol-start
  (grmr/rule "symbol-start"
               (grmr/any grmr/alpha (grmr/one-of "._<>=+-*/"))))

(def symbol-punct
  (grmr/rule "symbol-punct"
               (grmr/one-of "._<>=+-*?")))

(def symbol-char
  (grmr/rule "symbol-char"
               (grmr/any grmr/alpha grmr/digit symbol-punct)))

(def rest-of-symbol
  (grmr/rule "rest-of-symbol"
               (grmr/none-or-more symbol-char)))

(def read-symbol
  (grmr/rule "tagged-symbol"
             (apply-to (fn [file-name line-number start the-rest]
                         (ast/tagged-symbol c/no-symbol
                                            (symbol (to-str (comp [start] the-rest)))
                                            (symbol (to-str (comp [start] the-rest)))
                                            (c/Location file-name line-number)))
                       (grmr/get-value 'file-name)
                       (grmr/get-value 'line-number)
                       symbol-start
                       rest-of-symbol)))

(def not-eol
  (grmr/rule "not-eol"
             (grmr/not-char "\n")))

(defn string-frag-len [s]
  (assert (instance? String s))
  (inline C Integer "
    char *str = NULL;
    int64_t strLen;
    if (s_0->type == StringBufferType) {
      str = ((String *)s_0)->buffer;
      strLen = ((String *)s_0)->len;
    } else if (s_0->type == SubStringType) {
      str = ((SubString *)s_0)->buffer;
      strLen = ((SubString *)s_0)->len;
    }
    int64_t len;
    for (len = 0; len < strLen && str[len] != 34 && str[len] != 92;)
       len++;
    dec_and_free(s_0, 1);
    return(integerValue(len));
"))

(def read-integer
  (grmr/rule "number"
             (grmr/any (apply-to (fn [digits]
                                   (str-to-int (to-str digits)))
                                 (grmr/one-or-more grmr/digit))
                       (apply-to (fn [digits]
                                   (* -1 (str-to-int (to-str digits))))
                                 (grmr/ignore "-")
                                 (grmr/one-or-more grmr/digit)))))

(def read-integer-literal
  (grmr/rule "number"
             (apply-to (fn [file-name line-num digits]
                         (ast/integer-ast (str-to-int (to-str digits))
                                          (c/Location file-name line-num)))
                       (grmr/get-value 'file-name)
                       (grmr/get-value 'line-number)
                       (grmr/one-or-more grmr/digit))))

(def read-sub-expr
  (grmr/recurse "expr"))

(def linear-whitespace
  (grmr/rule "linear-whitespace"
             (grmr/any "," " " "\t")))

(def ignore-linear-whitespace (grmr/ignore (grmr/none-or-more linear-whitespace)))

(def newline
  (grmr/rule "newline"
             (apply-to identity
                       (grmr/string-terminal "\n")
                       (grmr/ignore (grmr/update-value 'line-number inc)))))

(def ignore-newlines (grmr/ignore (grmr/none-or-more newline)))

(def read-block-comment
  (grmr/rule "block-comment"
             (apply-to ast/block-comment
                       (grmr/get-value 'file-name)
                       (grmr/get-value 'line-number)
                       (grmr/one-or-more
                        (apply-to to-str
                                  (grmr/ignore (grmr/none-or-more (grmr/any linear-whitespace
                                                                            "\r"
                                                                            newline)))
                                  (grmr/ignore (grmr/one-or-more ";"))
                                  (grmr/none-or-more not-eol)
                                  (grmr/ignore newline))))))

(def whitespace
  (grmr/rule "whitespace"
             (grmr/any (grmr/all (grmr/one-or-more ";")
                                 (grmr/none-or-more not-eol)
                                 newline)
                       linear-whitespace
                       "\r"
                       newline)))

(def ignore-whitespace (grmr/ignore (grmr/none-or-more whitespace)))

(def read-arg
  (grmr/rule "arg"
             (apply-to comp
                       ignore-whitespace
                       read-symbol
                       ignore-whitespace)))

(def read-var-arg
  (grmr/rule "var-arg"
             (apply-to identity
                       ignore-whitespace
                       (grmr/ignore "&")
                       read-arg)))

(def read-open-paren
  (grmr/rule "open-paren"
             (grmr/ignore (grmr/all ignore-whitespace "(" ignore-whitespace))))

(def read-close-paren
  (grmr/rule "close-paren"
             (grmr/any (grmr/ignore (grmr/all ignore-whitespace ")"))
                       (grmr/error "Missing \")\"."))))

(def read-open-bracket
  (grmr/rule "open-bracket"
             (grmr/any (grmr/ignore (grmr/all ignore-whitespace "[" ignore-whitespace))
                       (grmr/error "Missing \"[\"."))))

(def read-close-bracket
  (grmr/rule "close-bracket"
             (grmr/any (grmr/ignore (grmr/all ignore-whitespace "]"))
                       (grmr/error "Missing \"]\"."))))

(def read-call
  (grmr/rule "call"
             (apply-to ast/call-expr
                       read-open-paren
                       (grmr/one-or-more (grmr/any read-sub-expr
                                                   ;; TODO: for lambda calc only
                                                   read-integer-literal))
                       read-close-paren)))

(def read-fn-doc
  (grmr/rule "fn-doc"
             (grmr/any read-block-comment
                       (apply-to (fn [fn ln]
                                   (ast/block-comment fn ln [""]))
                                 (grmr/get-value 'file-name)
                                 (grmr/get-value 'line-number)))))

(def read-single-arity
  (grmr/rule "single-arity"
             (apply-to (fn [params doc body]
                         (ast/fn-arity (ast/params (flatten params)) doc body))
                       (grmr/ignore read-open-bracket)
                       (grmr/none-or-more (grmr/all ignore-whitespace
                                                    read-symbol))
                       (grmr/ignore read-close-bracket)
                       read-fn-doc
                       (grmr/any (grmr/one-or-more read-sub-expr)
                                 (grmr/error "Body of function is wrong."))
                       ignore-whitespace)))

(def read-arities
  (grmr/rule "arities"
             (apply-to vector read-single-arity)))

(def read-fn
  (grmr/rule "fn"
             (apply-to identity
                       read-open-paren
                       (grmr/ignore "fn")
                       (grmr/ignore (grmr/one-or-more whitespace))
                       (grmr/any (apply-to (fn [name arities]
                                             (ast/fn-expr name arities))
                                           (grmr/optional read-symbol c/no-symbol)
                                           ignore-whitespace
                                           read-arities
                                           read-close-paren)
                                 (grmr/error "Invalid 'fn' expression.")))))

(def read-expr
  (grmr/rule read-sub-expr
             (apply-to identity
                       ignore-whitespace
                       (grmr/any read-integer-literal
                                 read-symbol
                                 read-fn
                                 read-call
                                 read-block-comment)
                       ignore-whitespace)))

(def read-def
  (grmr/rule "def"
             (apply-to identity
                       read-open-paren
                       (grmr/ignore "def")
                       (grmr/ignore (grmr/one-or-more whitespace))
                       (grmr/any (apply-to (fn [sym value]
                                             (ast/definition sym (list value)))
                                           (grmr/any read-symbol
                                                     (grmr/error "'def' must be followed by the name"
                                                                 "of the value being defined."))
                                           ignore-whitespace
                                           read-expr
                                           ignore-whitespace
                                           read-close-paren)
                                 (grmr/error "Invalid 'def' expression.")))))

(def read-defn
  (grmr/rule "defn"
             (apply-to identity
                       read-open-paren
                       (grmr/ignore "defn")
                       (grmr/ignore (grmr/one-or-more whitespace))
                       (grmr/any (apply-to (fn [name arities]
                                             (ast/definition name
                                               (list (ast/fn-expr name arities))))
                                           (grmr/any read-symbol
                                                     (grmr/error "'defn' must be followed by"
                                                                 "the name of the function."))
                                           (grmr/ignore (grmr/one-or-more whitespace))
                                           read-arities
                                           read-close-paren)
                                 (grmr/error "Invalid 'defn' expression.")))))

(def bad-expr
  (grmr/rule "bad-expr"
             (grmr/all ignore-whitespace
                       "("
                       (grmr/error "Invalid expression"))))

(def top-level
  (grmr/rule "top-level"
             (apply-to identity
                       ignore-whitespace
                       ;; (grmr/catch-error
                       ;;  output-error)
                       (grmr/any read-defn
                                 read-def
                                 read-block-comment

                                 ;; TODO: for lambda calc only
                                 read-call
                                 read-integer-literal

                                 bad-expr
                                 ;; TODO: detect end of input
                                 ))))
